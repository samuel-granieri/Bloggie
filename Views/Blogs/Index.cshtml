@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@model Bloggie.Models.ViewModels.BlogDetailsViewModel;

@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if(Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishDate.ToShortDateString()</span>
                </div>

                <div class="mb-3">
                    @if(signInManager.IsSignedIn(User))
                    {
                        if(Model.Liked)
                        {
                            <a id="btnLike" style="cursor: pointer">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor: pointer">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }

                    }
                    <span id="totalLikes">@Model.TotalLikes</span> likes
                </div>

                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3"/>

                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>
                        @if(signInManager.IsSignedIn(User))
                        {
                        <form method="post">
                            <div class="mb-3">
                                <label class="form-label"> Comment Description</label>
                                <input type="text" class="form-control" asp-for="CommentDescription"/>
                            </div>
                            <div class="mb-3">
                                <button type="submit" class="btn btn-dark">Submit</button>
                                <input type="hidden" asp-for="Id"/>
                                    <input type="hidden" asp-for="UrlHandle" />
                            </div>
                        </form>
                        }
                    </div>

                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach(var comment in Model.Comments)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @comment.Description
                                        </div>

                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@comment.Username</span>
                                            <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                        </div>

                                    </div>
                                </div>
                            }
                            
                        }
                    </div>
                </div>

                


            }
            else
            {
                <p>Blog Post not found</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikeElement = document.getElementById('totalLikes');

        // Buscar total de likes
        const getTotalLikes = async () => {
            try {
                const response = await fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': '*/*'
                    }
                });

                if (!response.ok) {
                    const text = await response.text();
                    console.error("Erro da API:", text);
                    return;
                }

                const data = await response.text();
                totalLikeElement.innerHTML = data;
            } catch (error) {
                console.log(error)
            }
        };

        // Função separada para poder remover depois
        const handleLikeClick = async () => {
            try {
                const response = await fetch('/api/BlogPostLike/Add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': '*/*'
                    },
                    body: JSON.stringify({
                        blogPostId: "@Model.Id",
                        userId: "@userManager.GetUserId(User)"
                    })
                });

                if (!response.ok) {
                    const text = await response.text();
                    console.error("Erro da API:", text);
                    return;
                }

                const data = await response.text();
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';

                // Remove o event listener após curtir
                btnLikeElement.removeEventListener('click', handleLikeClick);

                // Atualiza o total de likes
                getTotalLikes();

            } catch (error) {
                console.log(error)
            }
        };

        // Adiciona o event listener ao botão
        if (btnLikeElement) {
            btnLikeElement.addEventListener('click', handleLikeClick);
        }

        // Atualiza likes ao carregar a página
        getTotalLikes();
    </script>
}
